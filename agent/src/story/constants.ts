export const MARRIAGE_LICENSE_TERMS = BigInt(169)

export const licensingModuleAbi = [
    {
        type: 'constructor',
        inputs: [
            { name: 'accessController', internalType: 'address', type: 'address' },
            { name: 'ipAccountRegistry', internalType: 'address', type: 'address' },
            { name: 'moduleRegistry', internalType: 'address', type: 'address' },
            { name: 'royaltyModule', internalType: 'address', type: 'address' },
            { name: 'licenseRegistry', internalType: 'address', type: 'address' },
            { name: 'disputeModule', internalType: 'address', type: 'address' },
            { name: 'licenseToken', internalType: 'address', type: 'address' },
        ],
        stateMutability: 'nonpayable',
    },
    {
        type: 'error',
        inputs: [{ name: 'ipAccount', internalType: 'address', type: 'address' }],
        name: 'AccessControlled__NotIpAccount',
    },
    { type: 'error', inputs: [], name: 'AccessControlled__ZeroAddress' },
    {
        type: 'error',
        inputs: [{ name: 'authority', internalType: 'address', type: 'address' }],
        name: 'AccessManagedInvalidAuthority',
    },
    {
        type: 'error',
        inputs: [
            { name: 'caller', internalType: 'address', type: 'address' },
            { name: 'delay', internalType: 'uint32', type: 'uint32' },
        ],
        name: 'AccessManagedRequiredDelay',
    },
    {
        type: 'error',
        inputs: [{ name: 'caller', internalType: 'address', type: 'address' }],
        name: 'AccessManagedUnauthorized',
    },
    {
        type: 'error',
        inputs: [{ name: 'target', internalType: 'address', type: 'address' }],
        name: 'AddressEmptyCode',
    },
    {
        type: 'error',
        inputs: [{ name: 'implementation', internalType: 'address', type: 'address' }],
        name: 'ERC1967InvalidImplementation',
    },
    { type: 'error', inputs: [], name: 'ERC1967NonPayable' },
    { type: 'error', inputs: [], name: 'EnforcedPause' },
    { type: 'error', inputs: [], name: 'ExpectedPause' },
    { type: 'error', inputs: [], name: 'FailedInnerCall' },
    { type: 'error', inputs: [], name: 'InvalidInitialization' },
    { type: 'error', inputs: [], name: 'LicensingModule__DisputedIpId' },
    {
        type: 'error',
        inputs: [
            { name: 'licenseTemplate', internalType: 'address', type: 'address' },
            { name: 'licenseTermsId', internalType: 'uint256', type: 'uint256' },
        ],
        name: 'LicensingModule__InvalidLicenseTermsId',
    },
    {
        type: 'error',
        inputs: [{ name: 'hook', internalType: 'address', type: 'address' }],
        name: 'LicensingModule__InvalidLicensingHook',
    },
    {
        type: 'error',
        inputs: [
            { name: 'licenseTemplate', internalType: 'address', type: 'address' },
            { name: 'licenseTermsId', internalType: 'uint256', type: 'uint256' },
            { name: 'licensorIpId', internalType: 'address', type: 'address' },
        ],
        name: 'LicensingModule__LicenseDenyMintLicenseToken',
    },
    {
        type: 'error',
        inputs: [{ name: 'childIpId', internalType: 'address', type: 'address' }],
        name: 'LicensingModule__LicenseNotCompatibleForDerivative',
    },
    {
        type: 'error',
        inputs: [
            { name: 'ipLength', internalType: 'uint256', type: 'uint256' },
            { name: 'licenseTermsLength', internalType: 'uint256', type: 'uint256' },
        ],
        name: 'LicensingModule__LicenseTermsLengthMismatch',
    },
    {
        type: 'error',
        inputs: [
            { name: 'childIpId', internalType: 'address', type: 'address' },
            { name: 'licenseTokenIds', internalType: 'uint256[]', type: 'uint256[]' },
        ],
        name: 'LicensingModule__LicenseTokenNotCompatibleForDerivative',
    },
    {
        type: 'error',
        inputs: [],
        name: 'LicensingModule__LicensorIpNotRegistered',
    },
    { type: 'error', inputs: [], name: 'LicensingModule__MintAmountZero' },
    { type: 'error', inputs: [], name: 'LicensingModule__NoLicenseToken' },
    { type: 'error', inputs: [], name: 'LicensingModule__NoParentIp' },
    { type: 'error', inputs: [], name: 'LicensingModule__ReceiverZeroAddress' },
    { type: 'error', inputs: [], name: 'LicensingModule__ZeroAccessManager' },
    { type: 'error', inputs: [], name: 'LicensingModule__ZeroDisputeModule' },
    { type: 'error', inputs: [], name: 'LicensingModule__ZeroLicenseRegistry' },
    { type: 'error', inputs: [], name: 'LicensingModule__ZeroLicenseToken' },
    { type: 'error', inputs: [], name: 'LicensingModule__ZeroModuleRegistry' },
    { type: 'error', inputs: [], name: 'LicensingModule__ZeroRoyaltyModule' },
    { type: 'error', inputs: [], name: 'NotInitializing' },
    { type: 'error', inputs: [], name: 'ReentrancyGuardReentrantCall' },
    { type: 'error', inputs: [], name: 'UUPSUnauthorizedCallContext' },
    {
        type: 'error',
        inputs: [{ name: 'slot', internalType: 'bytes32', type: 'bytes32' }],
        name: 'UUPSUnsupportedProxiableUUID',
    },
    {
        type: 'event',
        anonymous: false,
        inputs: [
            {
                name: 'authority',
                internalType: 'address',
                type: 'address',
                indexed: false,
            },
        ],
        name: 'AuthorityUpdated',
    },
    {
        type: 'event',
        anonymous: false,
        inputs: [
            {
                name: 'caller',
                internalType: 'address',
                type: 'address',
                indexed: true,
            },
            {
                name: 'childIpId',
                internalType: 'address',
                type: 'address',
                indexed: true,
            },
            {
                name: 'licenseTokenIds',
                internalType: 'uint256[]',
                type: 'uint256[]',
                indexed: false,
            },
            {
                name: 'parentIpIds',
                internalType: 'address[]',
                type: 'address[]',
                indexed: false,
            },
            {
                name: 'licenseTermsIds',
                internalType: 'uint256[]',
                type: 'uint256[]',
                indexed: false,
            },
            {
                name: 'licenseTemplate',
                internalType: 'address',
                type: 'address',
                indexed: false,
            },
        ],
        name: 'DerivativeRegistered',
    },
    {
        type: 'event',
        anonymous: false,
        inputs: [
            {
                name: 'version',
                internalType: 'uint64',
                type: 'uint64',
                indexed: false,
            },
        ],
        name: 'Initialized',
    },
    {
        type: 'event',
        anonymous: false,
        inputs: [
            {
                name: 'caller',
                internalType: 'address',
                type: 'address',
                indexed: true,
            },
            { name: 'ipId', internalType: 'address', type: 'address', indexed: true },
            {
                name: 'licenseTemplate',
                internalType: 'address',
                type: 'address',
                indexed: false,
            },
            {
                name: 'licenseTermsId',
                internalType: 'uint256',
                type: 'uint256',
                indexed: false,
            },
        ],
        name: 'LicenseTermsAttached',
    },
    {
        type: 'event',
        anonymous: false,
        inputs: [
            {
                name: 'caller',
                internalType: 'address',
                type: 'address',
                indexed: true,
            },
            {
                name: 'licensorIpId',
                internalType: 'address',
                type: 'address',
                indexed: true,
            },
            {
                name: 'licenseTemplate',
                internalType: 'address',
                type: 'address',
                indexed: false,
            },
            {
                name: 'licenseTermsId',
                internalType: 'uint256',
                type: 'uint256',
                indexed: true,
            },
            {
                name: 'amount',
                internalType: 'uint256',
                type: 'uint256',
                indexed: false,
            },
            {
                name: 'receiver',
                internalType: 'address',
                type: 'address',
                indexed: false,
            },
            {
                name: 'startLicenseTokenId',
                internalType: 'uint256',
                type: 'uint256',
                indexed: false,
            },
        ],
        name: 'LicenseTokensMinted',
    },
    {
        type: 'event',
        anonymous: false,
        inputs: [
            {
                name: 'account',
                internalType: 'address',
                type: 'address',
                indexed: false,
            },
        ],
        name: 'Paused',
    },
    {
        type: 'event',
        anonymous: false,
        inputs: [
            {
                name: 'account',
                internalType: 'address',
                type: 'address',
                indexed: false,
            },
        ],
        name: 'Unpaused',
    },
    {
        type: 'event',
        anonymous: false,
        inputs: [
            {
                name: 'implementation',
                internalType: 'address',
                type: 'address',
                indexed: true,
            },
        ],
        name: 'Upgraded',
    },
    {
        type: 'function',
        inputs: [],
        name: 'ACCESS_CONTROLLER',
        outputs: [{ name: '', internalType: 'contract IAccessController', type: 'address' }],
        stateMutability: 'view',
    },
    {
        type: 'function',
        inputs: [],
        name: 'DISPUTE_MODULE',
        outputs: [{ name: '', internalType: 'contract IDisputeModule', type: 'address' }],
        stateMutability: 'view',
    },
    {
        type: 'function',
        inputs: [],
        name: 'IP_ACCOUNT_REGISTRY',
        outputs: [
            {
                name: '',
                internalType: 'contract IIPAccountRegistry',
                type: 'address',
            },
        ],
        stateMutability: 'view',
    },
    {
        type: 'function',
        inputs: [],
        name: 'LICENSE_NFT',
        outputs: [{ name: '', internalType: 'contract ILicenseToken', type: 'address' }],
        stateMutability: 'view',
    },
    {
        type: 'function',
        inputs: [],
        name: 'LICENSE_REGISTRY',
        outputs: [{ name: '', internalType: 'contract ILicenseRegistry', type: 'address' }],
        stateMutability: 'view',
    },
    {
        type: 'function',
        inputs: [],
        name: 'MODULE_REGISTRY',
        outputs: [{ name: '', internalType: 'contract IModuleRegistry', type: 'address' }],
        stateMutability: 'view',
    },
    {
        type: 'function',
        inputs: [],
        name: 'ROYALTY_MODULE',
        outputs: [{ name: '', internalType: 'contract RoyaltyModule', type: 'address' }],
        stateMutability: 'view',
    },
    {
        type: 'function',
        inputs: [],
        name: 'UPGRADE_INTERFACE_VERSION',
        outputs: [{ name: '', internalType: 'string', type: 'string' }],
        stateMutability: 'view',
    },
    {
        type: 'function',
        inputs: [{ name: 'accessManager', internalType: 'address', type: 'address' }],
        name: '__ProtocolPausable_init',
        outputs: [],
        stateMutability: 'nonpayable',
    },
    {
        type: 'function',
        inputs: [
            { name: 'ipId', internalType: 'address', type: 'address' },
            { name: 'licenseTemplate', internalType: 'address', type: 'address' },
            { name: 'licenseTermsId', internalType: 'uint256', type: 'uint256' },
        ],
        name: 'attachLicenseTerms',
        outputs: [],
        stateMutability: 'nonpayable',
    },
    {
        type: 'function',
        inputs: [],
        name: 'authority',
        outputs: [{ name: '', internalType: 'address', type: 'address' }],
        stateMutability: 'view',
    },
    {
        type: 'function',
        inputs: [{ name: 'accessManager', internalType: 'address', type: 'address' }],
        name: 'initialize',
        outputs: [],
        stateMutability: 'nonpayable',
    },
    {
        type: 'function',
        inputs: [],
        name: 'isConsumingScheduledOp',
        outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
        stateMutability: 'view',
    },
    {
        type: 'function',
        inputs: [
            { name: 'licensorIpId', internalType: 'address', type: 'address' },
            { name: 'licenseTemplate', internalType: 'address', type: 'address' },
            { name: 'licenseTermsId', internalType: 'uint256', type: 'uint256' },
            { name: 'amount', internalType: 'uint256', type: 'uint256' },
            { name: 'receiver', internalType: 'address', type: 'address' },
            { name: 'royaltyContext', internalType: 'bytes', type: 'bytes' },
        ],
        name: 'mintLicenseTokens',
        outputs: [{ name: 'startLicenseTokenId', internalType: 'uint256', type: 'uint256' }],
        stateMutability: 'nonpayable',
    },
    {
        type: 'function',
        inputs: [],
        name: 'name',
        outputs: [{ name: '', internalType: 'string', type: 'string' }],
        stateMutability: 'view',
    },
    {
        type: 'function',
        inputs: [],
        name: 'pause',
        outputs: [],
        stateMutability: 'nonpayable',
    },
    {
        type: 'function',
        inputs: [],
        name: 'paused',
        outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
        stateMutability: 'view',
    },
    {
        type: 'function',
        inputs: [
            { name: 'licensorIpId', internalType: 'address', type: 'address' },
            { name: 'licenseTemplate', internalType: 'address', type: 'address' },
            { name: 'licenseTermsId', internalType: 'uint256', type: 'uint256' },
            { name: 'amount', internalType: 'uint256', type: 'uint256' },
            { name: 'receiver', internalType: 'address', type: 'address' },
            { name: 'royaltyContext', internalType: 'bytes', type: 'bytes' },
        ],
        name: 'predictMintingLicenseFee',
        outputs: [
            { name: 'currencyToken', internalType: 'address', type: 'address' },
            { name: 'tokenAmount', internalType: 'uint256', type: 'uint256' },
        ],
        stateMutability: 'view',
    },
    {
        type: 'function',
        inputs: [],
        name: 'proxiableUUID',
        outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
        stateMutability: 'view',
    },
    {
        type: 'function',
        inputs: [
            { name: 'childIpId', internalType: 'address', type: 'address' },
            { name: 'parentIpIds', internalType: 'address[]', type: 'address[]' },
            { name: 'licenseTermsIds', internalType: 'uint256[]', type: 'uint256[]' },
            { name: 'licenseTemplate', internalType: 'address', type: 'address' },
            { name: 'royaltyContext', internalType: 'bytes', type: 'bytes' },
        ],
        name: 'registerDerivative',
        outputs: [],
        stateMutability: 'nonpayable',
    },
    {
        type: 'function',
        inputs: [
            { name: 'childIpId', internalType: 'address', type: 'address' },
            { name: 'licenseTokenIds', internalType: 'uint256[]', type: 'uint256[]' },
            { name: 'royaltyContext', internalType: 'bytes', type: 'bytes' },
        ],
        name: 'registerDerivativeWithLicenseTokens',
        outputs: [],
        stateMutability: 'nonpayable',
    },
    {
        type: 'function',
        inputs: [{ name: 'newAuthority', internalType: 'address', type: 'address' }],
        name: 'setAuthority',
        outputs: [],
        stateMutability: 'nonpayable',
    },
    {
        type: 'function',
        inputs: [
            { name: 'ipId', internalType: 'address', type: 'address' },
            { name: 'licenseTemplate', internalType: 'address', type: 'address' },
            { name: 'licenseTermsId', internalType: 'uint256', type: 'uint256' },
            {
                name: 'licensingConfig',
                internalType: 'struct Licensing.LicensingConfig',
                type: 'tuple',
                components: [
                    { name: 'isSet', internalType: 'bool', type: 'bool' },
                    { name: 'mintingFee', internalType: 'uint256', type: 'uint256' },
                    { name: 'licensingHook', internalType: 'address', type: 'address' },
                    { name: 'hookData', internalType: 'bytes', type: 'bytes' },
                ],
            },
        ],
        name: 'setLicensingConfig',
        outputs: [],
        stateMutability: 'nonpayable',
    },
    {
        type: 'function',
        inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
        name: 'supportsInterface',
        outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
        stateMutability: 'view',
    },
    {
        type: 'function',
        inputs: [],
        name: 'unpause',
        outputs: [],
        stateMutability: 'nonpayable',
    },
    {
        type: 'function',
        inputs: [
            { name: 'newImplementation', internalType: 'address', type: 'address' },
            { name: 'data', internalType: 'bytes', type: 'bytes' },
        ],
        name: 'upgradeToAndCall',
        outputs: [],
        stateMutability: 'payable',
    },
] as const
